rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles (for discovery and collaboration)
      // But privacy settings in the document control what data is shown in the app
      allow read: if true;

      // Users can only create/update their own profile
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);

      // Users can delete their own profile
      allow delete: if isOwner(userId);
    }

    // Projects collection
    match /projects/{projectId} {
      // Anyone can read public projects, only owners can read their private projects
      // If isPublic is not set, default to public (for backward compatibility)
      allow read: if resource.data.isPublic != false ||
                     (isAuthenticated() && resource.data.ownerId == request.auth.uid);

      // Only authenticated users can create projects
      allow create: if isAuthenticated();

      // Only the project owner can update or delete
      allow update: if isAuthenticated() &&
                      resource.data.ownerId == request.auth.uid;
      allow delete: if isAuthenticated() &&
                      resource.data.ownerId == request.auth.uid;
    }

    // Toolkits collection
    match /toolkits/{toolkitId} {
      // Anyone can read toolkits
      allow read: if true;

      // Only authenticated users can create toolkits
      allow create: if isAuthenticated();

      // Only the creator can update or delete
      allow update: if isAuthenticated() &&
                      resource.data.createdBy == request.auth.uid;
      allow delete: if isAuthenticated() &&
                      resource.data.createdBy == request.auth.uid;
    }

    // Messages collection (for future messaging feature)
    match /messages/{messageId} {
      // Users can only read messages where they are sender or recipient
      allow read: if isAuthenticated() &&
                    (resource.data.senderId == request.auth.uid ||
                     resource.data.recipientId == request.auth.uid);

      // Users can only create messages where they are the sender
      allow create: if isAuthenticated() &&
                      request.resource.data.senderId == request.auth.uid;

      // Messages cannot be updated or deleted (for message integrity)
      allow update, delete: if false;
    }

    // Conversations collection (for future messaging feature)
    match /conversations/{conversationId} {
      // Users can only read conversations they participate in
      allow read: if isAuthenticated() &&
                    request.auth.uid in resource.data.participants;

      // Users can create conversations where they are a participant
      allow create: if isAuthenticated() &&
                      request.auth.uid in request.resource.data.participants;

      // Users can update conversations they participate in (for read receipts, etc.)
      allow update: if isAuthenticated() &&
                      request.auth.uid in resource.data.participants;

      // Conversations cannot be deleted
      allow delete: if false;
    }
  }
}
