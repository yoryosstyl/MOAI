rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             (request.auth.token.email == 'yoryos.styl@gmail.com' ||
              request.auth.token.email == 'stavros.roussos@gmail.com');
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles (for discovery and collaboration)
      // But privacy settings in the document control what data is shown in the app
      allow read: if true;

      // Users can only create/update their own profile
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);

      // Users can delete their own profile
      allow delete: if isOwner(userId);
    }

    // Projects collection
    match /projects/{projectId} {
      // Anyone can read projects (for browsing and discovery)
      allow read: if true;

      // Only authenticated users can create projects
      allow create: if isAuthenticated();

      // Only the project owner can update or delete
      allow update: if isAuthenticated() &&
                      resource.data.ownerId == request.auth.uid;
      allow delete: if isAuthenticated() &&
                      resource.data.ownerId == request.auth.uid;
    }

    // Toolkits collection
    match /toolkits/{toolkitId} {
      // Anyone can read toolkits
      allow read: if true;

      // Only authenticated users can create toolkits
      allow create: if isAuthenticated();

      // Only the creator can update or delete
      allow update: if isAuthenticated() &&
                      resource.data.createdBy == request.auth.uid;
      allow delete: if isAuthenticated() &&
                      resource.data.createdBy == request.auth.uid;
    }

    // News collection
    match /news/{newsId} {
      // Anyone can read approved news, admins can read all news, submitters can read their own
      allow read: if resource.data.status == 'approved' ||
                     isAdmin() ||
                     (isAuthenticated() && resource.data.submittedBy == request.auth.uid);

      // Only authenticated users can create news
      allow create: if isAuthenticated();

      // Admins can update/delete any news, or the submitter can update/delete their own
      allow update: if isAdmin() ||
                      (isAuthenticated() && resource.data.submittedBy == request.auth.uid);
      allow delete: if isAdmin() ||
                      (isAuthenticated() && resource.data.submittedBy == request.auth.uid);
    }
  }
}
